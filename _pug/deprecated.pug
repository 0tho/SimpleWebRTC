extends _layout.pug

block vars
  - var pageDescription = 'SimpleWebRTC'
  - var bodyClass = 'page-deprecated'
  - var headerClass = 'deprecated'

block title
  | Deprecated - SimpleWebRTC

block content

  include includes/header

  .container

    section
      h2 You can build cool stuff with WebRTC in five minutes.
      p Want to see what this library can do? Check out the <a href="/videochat">videochat</a>, <a href="/audio">audiochat</a> (works in Microsoft Edge, too!) and <a href="/file">file transfer</a> demos.
      p For solving advanced problems, <a href="/advanced">see here</a>.

      h3 A dab of HTML
      :markdown-it(linkify langPrefix='hljs ')
        ```html
          <!DOCTYPE html>
          <html>
              <head>
                  <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script> 
                  <script src="https://simplewebrtc.com/latest-v3.js"></script> 
              </head>
              <body>
                  <video height="300" id="localVideo"></video>
                  <div id="remotesVideos"></div>
              </body>
          </html>
        ```

      h3 Stir in the WebRTC object
      :markdown-it(linkify langPrefix='hljs ')
        ```js
          var webrtc = new SimpleWebRTC({
            // the id/element dom element that will hold "our" video
            localVideoEl: 'localVideo',
            // the id/element dom element that will hold remote videos
            remoteVideosEl: 'remotesVideos',
            // immediately ask for camera access
            autoRequestMedia: true
          });
        ```

      h3 And join when ready
      :markdown-it(linkify langPrefix='hljs ')
        ```js
          // we have to wait until it's ready
          webrtc.on('readyToCall', function () {
            // you can name it anything
            webrtc.joinRoom('your awesome room name');
          });
        ```

    section
      h2 Need More Control?

      p In order to make WebRTC as approachable as possible, SimpleWebRTC assumes a lot about the type of app you want to build.
      p It's unlikely that if you're going to ship an app that uses WebRTC SimpleWebRTC will have the exact features you want. Likely you'll want to use bits and pieces of it. Well, you're in luck! SimpleWebRTC is actually comprised of a whole bunch of independent little modules to help you:

      ul.bullet-list
        li <a href="https://github.com/andyet/signalmaster">Signalmaster</a> — Simple node.js/socket.io powered signaling server.
        li <a href="https://github.com/otalk/rtcpeerconnection">RTCPeerConnection</a> — Wraps/normalizes peer connections.
        li <a href="https://github.com/otalk/getUserMedia">getUserMedia</a> — Wraps/normalizes getting access to user's camera/mic.
        li <a href="https://github.com/otalk/attachMediaStream">attachMediaStream</a> — Normalizes adding streams to video tags and handles muting/mirroring in one simple API.
        li <a href="https://github.com/otalk/webrtcsupport">webrtcsupport</a> — For checking browser capability and grabbing appropriate constructors for stuff like RTCPeerConnection and RTCSessionDescription as well as checking support for data channels, etc.
        li <a href="https://github.com/otalk/getScreenMedia">getScreenMedia</a> — Extends getUserMedia but for getting access to screen media for screensharing.
        li <a href="https://github.com/HenrikJoreteg/mediastream-gain">mediastream-gain</a> — Gives you a simple audio input volume controller.
        li <a href="https://github.com/otalk/hark">hark</a> — Detect who's speaking using the Web Audio API.
        li <a href="https://github.com/HenrikJoreteg/wildemitter">WildEmitter</a> — Slick, minimalist EventEmitter with support for wildcards.

  section
    h2 More Info
    p SimpleWebRTC was created by <a href="https://twitter.com/henrikjoreteg">@HenrikJoreteg</a>.
    p Also, don't forget to try <a href="https://talky.io/">Talky</a> for zero-setup meetings powered by WebRTC.
    p Henrik's also written a book about modern client-side apps to help you build a well-structured, maintainable app to contain your WebRTC experience. The approaches it describes were used to build <a href="https://talky.io/">Talky</a> and many similar apps. Check out the book: <a href="http://humanjavascript.com/">Human JavaScript</a>.

    h3 Signaling server
    p SimpleWebRTC uses the SimpleWebRTC.com sandbox server and is only for development and testing purposes. This server does not provide media relay facilities so there might be connectivity issues.
    p The signaling server is open source (MIT) licensed as well. <a href="https://github.com/andyet/signalmaster">You can find it here</a>. For production use, please run your own signaling server.

    h3 STUN and TURN server
    p STUN and TURN servers are required to help establish the connection between clients. STUN helps clients to determine their public IP and TURN provides media relay.
    p For <a href="https://talky.io/">talky.io</a>, we use a modified version of the <a href="http://creytiv.com/restund/">restund</a> available <a href="https://github.com/otalk/restund">here</a> that works great in combination with signalmaster. Alternatively, you can use <a href="https://code.google.com/p/rfc5766-turn-server/">rfc-5766-turn-server</a>.
    p If you don't want to run your own TURN server, checkout <a href="http://xirsys.com/">XirSys</a> who provide hosting and <a href="http://xirsys.com/simplewebrtc/">a tutorial</a> on integrating simplewebrtc with their API.

  section
    h2 Need Help?
    
    ul.bullet-list
      li Join the <a href="http://lists.andyet.com/mailman/listinfo/simplewebrtc">SimpleWebRTC discussion list</a> if you have question
      li Or <a href="https://gitter.im/HenrikJoreteg/SimpleWebRTC">join the conversation on Gitter</a> if you have questions.
      li Have a look around in the <a href="https://github.com/HenrikJoreteg/SimpleWebRTC/issues">issues</a> to see if your question has been answered.
      li Also, at <a href="http://andyet.com/">&yet</a> we offer <a href="https://andyet.com/talky">WebRTC consulting</a> to help you build awesome apps with WebRTC.

  include includes/footer
